using System;
using System.Collections.Generic;
public class OrderingSystem
{
	private List<Order> OrderList = new List<Order>();
	public void NewOrder()
	{
		OrderList.Add(new Order());
		ModifyOrder(OrderList.Count() - 1);
	}
	public void ModifyOrder(int OrderID)
	{
		OrderList[OrderID].AddItemToOrder(1);
	}
	public void DeleteOrder(int OrderID)
	{
		OrderList.RemoveAt(OrderID);
		//Very bad way of keeping track of order IDs is using the indexes btw
	}
	public void SendToKitchen()
	{

	}
	public void Pay()
	{
		PrintReceipt();
	}
	public void PrintReceipt()
	{

	}
}

public class Order
{
	List<Item> OrderItems = new List<Item>();
	private static int OrderNum = 1;
	private int OrderID;
	private string Status;
	private bool New = false;
	private bool InProgress = false;
	private bool Complete = false;
	public Order()
	{
        OrderID = OrderNum++;
		Status = "New";
    }
	public void AddItemToOrder(int ItemID)
	{
		Menu menu = new Menu();
		OrderItems.Add(menu.FindItem(ItemID));
	}
	public void ChangeOrderStatus()
	{
		if (New)
		{
			InProgress = true;
			New = false;
		}
		else if (InProgress)
		{
			Complete = true;
			InProgress = false;
		}
	}
}

public class Menu
{
    //Menu needs to be able to change in case manager needs to add something
    protected List<Item> MenuItems = new List<Item>();
	public void AddAllItemstoMenuItems()
	{
		MenuItems.Add(new Item("Sweet Tea", 2.00f, false));
		//add the rest later if using this code
	}
	public Item FindItem(int ItemID)
	{
		return MenuItems[ItemID];
    }
}

public class Item
{
	private string Name;
	private float Cost;
	private static int ItemNum = 1;
	private int ItemID;
	private bool Customizable;
	public Item(string Name, float Cost, bool Customizable)
	{
		this.Name = Name;
		ItemID = ItemNum++;
		this.Cost = Cost;
		this.Customizable = Customizable;
	}
	public void Customize()
	{
		if (Customizable)
		{

		}
		else
		{
			throw new Exception("Cannot customize this item");
		}
	}
}
public class Manager
{
	private string Username;
	List<Employee> Employees = new List<Employee>();
	public Manager()
	{

	}
	public Manager(List<Employee> Employees)
	{
		this.Employees = Employees;
	}
	public void AddNewEmployee(Employee EmployeeToAdd)
	{
		Employees.Add(EmployeeToAdd);
	}
	public void RemoveEmployee(Employee EmployeeToRemove)
	{
		Employees.Remove(EmployeeToRemove);
	}
	public void AssignTables(Employee EmployeeToAssignTo)
	{
		
	}
}
public class ManagerLogin
{
	private bool ManagerLoggedIn = false;
	public void ForgotPassword()
	{
		//empty method to illustrate on UML
	}
	public void CheckLogInInformation()
	{
		//empty method to illustrate on UML
	}
	public void LogIn()
	{
		ManagerLoggedIn = true;
	}
	public void LogOut()
	{
		ManagerLoggedIn = false;
	}
	public bool GetLoggedIn()
	{
		return ManagerLoggedIn;
	}
}
public class EmployeeLogin
{
	private ManagerLogin ML;
	private bool EmployeeLoggedIn;
	EmployeeLogin(ManagerLogin mL)
    {
        ML = mL;
    }
    public void CheckLogInInformation()
    {
        //empty method to illustrate on UML
    }
    public void LogIn()
	{
		if (ML.GetLoggedIn())
		{
			EmployeeLoggedIn = true;
		}
	}
    public void LogOut()
    {
        if (ML.GetLoggedIn())
        {
			EmployeeLoggedIn = false;
        }
    }
}
public class Table
{
	private static int TableNumber = 1;
	private int TableID;
    private string CurrentStatus = "";
	private Order CurrentOrder;
    bool StatusUpdate = false; //If StatusUpdate = true, the status is being changed.
    public Table()
	{
		CurrentStatus = "Clean";
		TableID = TableNumber++;
		CurrentOrder = new Order();
	}
	public Table(string Status, int TableID, Order order)
	{
		ChangeStatus(Status);
		this.TableID = TableID;
		CurrentOrder = order;
	}
	public void ChangeStatus(string Status)
	{
		CurrentStatus = Status;
	}
}
public class Employee 
{
	private string Name;
    protected List<Table> TablesAssigned;
    public Employee(List<Table> TablesAssigned, string Name)
    {
        this.TablesAssigned = TablesAssigned;
		this.Name = Name;
    }
}
public class Busboy : Employee
{
	public Busboy(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name)
    {

	}
    public virtual void ChangeStatus(Table AssignedTable, byte Status)
    {
        AssignedTable.ChangeStatus("Clean");
    }
}
public class Host : Busboy
{
	public Host(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name)
    {

	}
	public override void ChangeStatus(Table AssignedTable, byte Status)
	{
		if (Status == 0)
		{
			AssignedTable.ChangeStatus("Clean");
		}
		else if (Status == 1)
		{
			AssignedTable.ChangeStatus("Occupied");
		}
	}
}
public class Waiter : Host
{
	public Waiter(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name)
    {

	}
    public override void ChangeStatus(Table AssignedTable, byte Status)
    {
        AssignedTable.ChangeStatus("Needs Attention");
    }
}
public class Cook : Waiter
{
	public Cook(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name)
    {

	}
}
public class Analytics
{
    public void ShowDailyAnalytics() { }
    public void ShowWeeklyAnalytics() { }
    public void ShowMonthlyAnalytics() { }
}
