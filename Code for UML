using System;
using System.Collections.Generic;
public class OrderingSystem
{
	private List<Order> OrderList = new List<Order>();
	public void NewOrder()
	{
		OrderList.Add(new Order());
		ModifyOrder(OrderList.Count() - 1);
	}
	public void ModifyOrder(int OrderID)
	{
		OrderList[OrderID].AddItemToOrder(1);
	}
	public void DeleteOrder(int OrderID)
	{
		OrderList.RemoveAt(OrderID);
		//Very bad way of keeping track of order IDs is using the indexes btw
	}
	public void SendToKitchen()
	{

	}
	public void Pay()
	{
		PrintReceipt();
	}
	public void PrintReceipt()
	{

	}
	public void AddToOrderList(Order NewOrder)
	{
		OrderList.Add(NewOrder);
	}
	public void RemoveFromOrderList(Order OrderToBeRemoved)
	{
		OrderList.Remove(OrderToBeRemoved);
	}
	public void ReviseOrder(Order UpdatedOrder)
	{
		foreach(Order O in OrderList)
		{
			if (O.GetID() == UpdatedOrder.GetID())
			{
				OrderList[OrderList.IndexOf(O)] = UpdatedOrder;
				break;
			}
		}
    }
    public List<Order> GetOrderList()
    {
		return OrderList;
    }
	public void UpdateOrderList(List<Order> UpdatedOrderList)
	{
		this.OrderList = UpdatedOrderList;
	}
	public Order GetOrder(int OrderID)
	{
		foreach (Order O in OrderList)
		{
			if (O.GetID() == OrderID)
			{
				return O;
			}
		}
        throw new Exception("Error: Order not contained in list.");
    }
}

public class Order
{
	List<Item> OrderItems = new List<Item>();
	private static int OrderNum = 1;
	private int OrderID;
	private string Status;
	private bool New = false;
	private bool InProgress = false;
	private bool Complete = false;
	public Order()
	{
        OrderID = OrderNum++;
		Status = "New";
    }
	public int GetID()
	{
		return OrderID;
	}
	public void AddItemToOrder(int ItemID)
	{
		Menu menu = new Menu();
		OrderItems.Add(menu.FindItem(ItemID));
	}
	public void ChangeOrderStatus()
	{
		if (New)
		{
			InProgress = true;
			New = false;
		}
		else if (InProgress)
		{
			Complete = true;
			InProgress = false;
		}
	}
}

public class Menu
{
    //Menu needs to be able to change in case manager needs to add something
    protected List<Item> MenuItems = new List<Item>();
	public void AddAllItemstoMenuItems()
	{
		MenuItems.Add(new Item("Sweet Tea", 2.00f, false, "Beverage"));
		//add the rest later if using this code
	}
	public Item FindItem(int ItemID)
	{
		return MenuItems[ItemID];
    }
}

public class Item
{
	private string Name;
	private float Cost;
	private static int ItemNum = 1;
	private int ItemID;
	private bool Customizable;
	private string Category;
	public Item(string Name, float Cost, bool Customizable, string Category)
	{
		this.Name = Name;
		ItemID = ItemNum++;
		this.Cost = Cost;
		this.Customizable = Customizable;
		this.Category = Category;
	}
	public void Customize()
	{
		if (Customizable)
		{

		}
		else
		{
			throw new Exception("Cannot customize this item");
		}
	}
}
public class Manager
{
	private string Username;
	private string Password;
	List<Employee> Employees = new List<Employee>();
	public Manager(List<Employee> Employees, string Username, string Password)
	{
		this.Username = Username;
		this.Password = Password;
		this.Employees = Employees;
	}
	public void AddNewEmployee(Employee EmployeeToAdd)
	{
		Employees.Add(EmployeeToAdd);
	}
	public void RemoveEmployee(Employee EmployeeToRemove)
	{
		Employees.Remove(EmployeeToRemove);
	}
	public void AssignTables(Employee EmployeeToAssignTo)
	{
		
	}
}
public class ManagerLogin
{
	private bool ManagerLoggedIn = false;
	public void ForgotPassword()
	{
		//empty method to illustrate on UML
	}
	public void CheckLogInInformation()
	{
		//empty method to illustrate on UML
	}
	public void LogIn()
	{
		ManagerLoggedIn = true;
	}
	public void LogOut()
	{
		ManagerLoggedIn = false;
	}
}
public class EmployeeLogin
{
	private bool ManagerLoggedIn;
	private bool EmployeeLoggedIn;
	EmployeeLogin(bool ManagerLoggedIn)
    {
        this.ManagerLoggedIn = ManagerLoggedIn;
    }
    public void CheckLogInInformation()
    {
        //empty method to illustrate on UML
    }
    public void LogIn()
	{
		if (ManagerLoggedIn)
		{
			EmployeeLoggedIn = true;
		}
	}
    public void LogOut()
    {
        if (ManagerLoggedIn)
        {
			EmployeeLoggedIn = false;
        }
    }
}
public class Table
{
	private static int TableNumber = 1;
	private int TableID;
    private string CurrentStatus = "";
	private Order CurrentOrder;
	private OrderingSystem OrderSystem;
    bool StatusUpdate = false; //If StatusUpdate = true, the status is being changed.
    public Table(OrderingSystem OrderSystem)
	{
		CurrentStatus = "Clean";
		TableID = TableNumber++;
		CurrentOrder = new Order();
		this.OrderSystem = OrderSystem;
		OrderSystem.AddToOrderList(CurrentOrder);
	}
	public Table(string Status, int TableID, Order order, OrderingSystem OrderSystem)
	{
		ChangeTableStatus(Status);
		this.TableID = TableID;
		CurrentOrder = order;
		this.OrderSystem = OrderSystem;
	}
	public void ChangeTableStatus(string Status)
	{
		if (Status.Equals("Clean") || Status.Equals("Occupied") || Status.Equals("Needs Attention"))
		{
			CurrentStatus = Status;
		}
		else
		{
			throw new Exception("Error: Table status could not be changed.");
		}
	}
	public void NewOrder()
	{
		List<Order> ListOfOrders = OrderSystem.GetOrderList();
		OrderSystem.ReviseOrder(CurrentOrder);
		CurrentOrder = new Order();
		OrderSystem.UpdateOrderList(ListOfOrders);
	}
	public void ChangeCurrentOrder()
	{
		OrderSystem.ReviseOrder(CurrentOrder);
		
	}
	public void ModifyCurrentOrder()
	{

	}
	public void SendOrderToKitchen()
	{

	}
}
public class Employee 
{
	protected string Name;
    protected bool Employed = true;
    protected static int EmployeeCounter = 1;
    protected static int EmployeeID;
    protected List<Table> TablesAssigned;
    public Employee(List<Table> TablesAssigned, string Name)
    {
        this.TablesAssigned = TablesAssigned;
		this.Name = Name;
		EmployeeID = EmployeeCounter++;
    }
	public void ChangeEmploymentStatus()
	{
		Employed = !Employed;
	}
	public bool isEmployed()
	{
		return Employed;
	}
}
public class Busboy : Employee
{
	public Busboy(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name) { }
	public virtual void ChangeTableStatus(Table AssignedTable, byte Status)
	{
		if (Status == 0)
		{
			AssignedTable.ChangeTableStatus("Clean");

		}
	}
}
public class Host : Busboy
{
	public Host(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name) { }
	public override void ChangeTableStatus(Table AssignedTable, byte Status)
	{
		if (Status == 0)
		{
			AssignedTable.ChangeTableStatus("Clean");
		}
		else if (Status == 1)
		{
			AssignedTable.ChangeTableStatus("Occupied");
		}
	}
}
public class Waiter : Host
{
	public Waiter(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name) { }
    public override void ChangeTableStatus(Table AssignedTable, byte Status)
    {
        AssignedTable.ChangeTableStatus("Needs Attention");
    }
	public void CreateNewOrder(Table T)
	{

	}
	public void ChangeCurrentOrder(Table T)
	{
		T.ChangeCurrentOrder();
	}
	public void ModifyCurrentOrder(Table T)
	{
		T.ModifyCurrentOrder();
	}
	public void SendOrderToKitchen(Table T)
	{
		T.SendOrderToKitchen();
	}
}
public class Cook : Waiter
{
	public Cook(List<Table> TablesAssigned, string Name) : base(TablesAssigned, Name) { }
	public void ChangeOrderStatus(Order OrderforStatusChange)
	{
		
	}
}
public class Analytics
{
    public void ShowDailyAnalytics() { }
    public void ShowWeeklyAnalytics() { }
    public void ShowMonthlyAnalytics() { }
}
